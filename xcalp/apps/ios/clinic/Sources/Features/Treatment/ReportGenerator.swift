import Charts
import Foundation
import PDFKit

public class ReportGenerator {
    public struct Report {
        let id: UUID
        let generatedDate: Date
        let patientData: PatientData
        let scanData: ScanHistoryManager.ScanVersion?
        let selectedTemplate: TreatmentTemplate
        let comparisonResults: TemplateAnalyzer.ComparisonResult?
        let simulationResults: TreatmentTemplate.SimulationResults
        let recommendations: [String]
    }
    
    public func generateDetailedReport(_ data: Report) async throws -> Data {
        let pdfMetaData = [
            kCGPDFContextCreator: "Xcalp Clinic",
            kCGPDFContextAuthor: "Generated by Xcalp Clinic App",
            kCGPDFContextTitle: "Treatment Plan Report"
        ]
        let format = UIGraphicsPDFRendererFormat()
        format.documentInfo = pdfMetaData as [String: Any]
        
        let pageRect = CGRect(x: 0, y: 0, width: 595.2, height: 841.8) // A4 size
        let renderer = UIGraphicsPDFRenderer(bounds: pageRect, format: format)
        
        return try await renderer.pdfData { context in
            // Title Page
            context.beginPage()
            renderTitlePage(pageRect: pageRect, data: data)
            
            // Patient Information
            context.beginPage()
            renderPatientInformation(pageRect: pageRect, data: data)
            
            // Scan Analysis
            if data.scanData != nil {
                context.beginPage()
                renderScanAnalysis(pageRect: pageRect, data: data)
            }
            
            // Treatment Plan
            context.beginPage()
            renderTreatmentPlan(pageRect: pageRect, data: data)
            
            // Comparison Analysis
            if let comparison = data.comparisonResults {
                context.beginPage()
                renderComparisonAnalysis(pageRect: pageRect, comparison: comparison)
            }
            
            // Timeline and Predictions
            context.beginPage()
            renderTimelineAndPredictions(pageRect: pageRect, data: data)
            
            // Recommendations
            context.beginPage()
            renderRecommendations(pageRect: pageRect, data: data)
        }
    }
    
    private func renderTitlePage(pageRect: CGRect, data: Report) {
        let titleFont = UIFont.systemFont(ofSize: 28, weight: .bold)
        let subtitleFont = UIFont.systemFont(ofSize: 16)
        let dateFormatter = DateFormatter()
        dateFormatter.dateStyle = .long
        
        // Draw logo
        if let logo = UIImage(named: "XcalpLogo") {
            let logoRect = CGRect(x: (pageRect.width - 100) / 2, y: 100, width: 100, height: 100)
            logo.draw(in: logoRect)
        }
        
        // Draw title
        let title = "Treatment Plan Report"
        let titleAttributes = [
            NSAttributedString.Key.font: titleFont,
            NSAttributedString.Key.foregroundColor: UIColor(named: "BrandPrimary") ?? .black
        ]
        let titleSize = title.size(withAttributes: titleAttributes)
        let titleRect = CGRect(
            x: (pageRect.width - titleSize.width) / 2,
            y: 250,
            width: titleSize.width,
            height: titleSize.height
        )
        title.draw(in: titleRect, withAttributes: titleAttributes)
        
        // Draw date and ID
        let subtitle = """
            Generated on: \(dateFormatter.string(from: data.generatedDate))
            Report ID: \(data.id.uuidString)
            """
        let subtitleAttributes = [
            NSAttributedString.Key.font: subtitleFont,
            NSAttributedString.Key.foregroundColor: UIColor.gray
        ]
        let subtitleRect = CGRect(
            x: 50,
            y: 300,
            width: pageRect.width - 100,
            height: 50
        )
        subtitle.draw(in: subtitleRect, withAttributes: subtitleAttributes)
    }
    
    private func renderPatientInformation(pageRect: CGRect, data: Report) {
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        let title = "Patient Information"
        let titleAttributes = [
            NSAttributedString.Key.font: titleFont
        ]
        title.draw(at: CGPoint(x: 50, y: 50), withAttributes: titleAttributes)
        
        // Patient details
        let details = """
            Age: \(data.patientData.age)
            Scalp Health Score: \(Int(data.patientData.scalpHealthScore * 100))%
            Medical Conditions: \(getMedicalConditionsText(data.patientData))
            Hair Type: \(data.patientData.hairType.rawValue)
            Donor Density: \(data.patientData.donorDensity) grafts/cm²
            """
        
        let detailsAttributes = [
            NSAttributedString.Key.font: bodyFont
        ]
        
        details.draw(in: CGRect(x: 50, y: 100, width: pageRect.width - 100, height: 200),
                    withAttributes: detailsAttributes)
    }
    
    private func renderScanAnalysis(pageRect: CGRect, data: Report) {
        guard let scan = data.scanData else { return }
        
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        "Scan Analysis".draw(
            at: CGPoint(x: 50, y: 50),
            withAttributes: [NSAttributedString.Key.font: titleFont]
        )
        
        // Scan details
        let details = """
            Scan Date: \(formatDate(scan.timestamp))
            Quality Score: \(Int(scan.quality * 100))%
            Notes: \(scan.notes)
            """
        
        details.draw(
            in: CGRect(x: 50, y: 100, width: pageRect.width - 100, height: 100),
            withAttributes: [NSAttributedString.Key.font: bodyFont]
        )
        
        // Draw scan thumbnail if available
        if let thumbnailData = scan.thumbnailData,
           let thumbnail = UIImage(data: thumbnailData) {
            let imageRect = CGRect(x: 50, y: 220, width: 200, height: 200)
            thumbnail.draw(in: imageRect)
        }
    }
    
    private func renderTreatmentPlan(pageRect: CGRect, data: Report) {
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let subtitleFont = UIFont.systemFont(ofSize: 16, weight: .semibold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        "Treatment Plan".draw(
            at: CGPoint(x: 50, y: 50),
            withAttributes: [NSAttributedString.Key.font: titleFont]
        )
        
        // Template details
        let template = data.selectedTemplate
        let details = """
            Template: \(template.name)
            Version: \(template.version)
            Author: \(template.author)
            
            Parameters:
            • Target Density: \(Int(template.parameters.targetDensity)) grafts/cm²
            • Graft Spacing: \(String(format: "%.1f", template.parameters.graftSpacing))mm
            • Angle Variation: \(Int(template.parameters.angleVariation))°
            • Naturalness Factor: \(Int(template.parameters.naturalness * 100))%
            """
        
        details.draw(
            in: CGRect(x: 50, y: 100, width: pageRect.width - 100, height: 200),
            withAttributes: [NSAttributedString.Key.font: bodyFont]
        )
        
        // Regions
        "Treatment Regions".draw(
            at: CGPoint(x: 50, y: 320),
            withAttributes: [NSAttributedString.Key.font: subtitleFont]
        )
        
        var yOffset: CGFloat = 360
        for region in template.regions {
            let regionText = """
                \(region.name)
                Type: \(region.type.rawValue)
                Density: \(Int(region.parameters.density)) grafts/cm²
                Area: \(String(format: "%.1f", region.area))cm²
                """
            
            regionText.draw(
                in: CGRect(x: 70, y: yOffset, width: pageRect.width - 120, height: 100),
                withAttributes: [NSAttributedString.Key.font: bodyFont]
            )
            
            yOffset += 120
        }
    }
    
    private func renderComparisonAnalysis(pageRect: CGRect, comparison: TemplateAnalyzer.ComparisonResult) {
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let subtitleFont = UIFont.systemFont(ofSize: 16, weight: .semibold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        "Comparison Analysis".draw(
            at: CGPoint(x: 50, y: 50),
            withAttributes: [NSAttributedString.Key.font: titleFont]
        )
        
        var yOffset: CGFloat = 100
        
        // Render metrics
        for metric in comparison.metrics {
            metric.name.draw(
                at: CGPoint(x: 50, y: yOffset),
                withAttributes: [NSAttributedString.Key.font: subtitleFont]
            )
            
            yOffset += 30
            
            let description = """
                \(metric.description)
                Optimal Range: \(String(format: "%.1f", metric.optimalRange.lowerBound)) - \(String(format: "%.1f", metric.optimalRange.upperBound))
                """
            
            description.draw(
                in: CGRect(x: 70, y: yOffset, width: pageRect.width - 120, height: 50),
                withAttributes: [NSAttributedString.Key.font: bodyFont]
            )
            
            yOffset += 70
        }
        
        // Render risk factors
        if !comparison.riskFactors.isEmpty {
            "Risk Factors".draw(
                at: CGPoint(x: 50, y: yOffset),
                withAttributes: [NSAttributedString.Key.font: subtitleFont]
            )
            
            yOffset += 30
            
            for risk in comparison.riskFactors {
                let riskText = """
                    Severity: \(risk.severity.rawValue.capitalized)
                    \(risk.description)
                    Mitigation: \(risk.mitigation)
                    """
                
                riskText.draw(
                    in: CGRect(x: 70, y: yOffset, width: pageRect.width - 120, height: 80),
                    withAttributes: [NSAttributedString.Key.font: bodyFont]
                )
                
                yOffset += 100
            }
        }
    }
    
    private func renderTimelineAndPredictions(pageRect: CGRect, data: Report) {
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let subtitleFont = UIFont.systemFont(ofSize: 16, weight: .semibold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        "Timeline and Predictions".draw(
            at: CGPoint(x: 50, y: 50),
            withAttributes: [NSAttributedString.Key.font: titleFont]
        )
        
        let simulation = data.simulationResults
        
        // Growth predictions
        let predictions = """
            Expected Growth Rate: \(Int(simulation.expectedGrowthRate * 100))%
            Coverage Estimate: \(Int(simulation.coverageEstimate * 100))%
            Naturalness Prediction: \(Int(simulation.naturalnessPrediction * 100))%
            """
        
        predictions.draw(
            in: CGRect(x: 50, y: 100, width: pageRect.width - 100, height: 100),
            withAttributes: [NSAttributedString.Key.font: bodyFont]
        )
        
        // Timeline markers
        "Timeline Milestones".draw(
            at: CGPoint(x: 50, y: 220),
            withAttributes: [NSAttributedString.Key.font: subtitleFont]
        )
        
        var yOffset: CGFloat = 260
        for marker in simulation.timelineMarkers {
            let markerText = """
                Month \(marker.month):
                Progress: \(Int(marker.expectedProgress * 100))%
                \(marker.description)
                """
            
            markerText.draw(
                in: CGRect(x: 70, y: yOffset, width: pageRect.width - 120, height: 80),
                withAttributes: [NSAttributedString.Key.font: bodyFont]
            )
            
            yOffset += 100
        }
    }
    
    private func renderRecommendations(pageRect: CGRect, data: Report) {
        let titleFont = UIFont.systemFont(ofSize: 20, weight: .bold)
        let bodyFont = UIFont.systemFont(ofSize: 14)
        
        // Section title
        "Recommendations".draw(
            at: CGPoint(x: 50, y: 50),
            withAttributes: [NSAttributedString.Key.font: titleFont]
        )
        
        var yOffset: CGFloat = 100
        for (index, recommendation) in data.recommendations.enumerated() {
            let bulletPoint = "• \(recommendation)"
            
            bulletPoint.draw(
                in: CGRect(x: 50, y: yOffset, width: pageRect.width - 100, height: 50),
                withAttributes: [NSAttributedString.Key.font: bodyFont]
            )
            
            yOffset += 30
        }
    }
    
    private func getMedicalConditionsText(_ patient: PatientData) -> String {
        var conditions: [String] = []
        if patient.hasDiabetes {
            conditions.append("Diabetes")
        }
        if patient.isSmokingHistory {
            conditions.append("Smoking History")
        }
        return conditions.isEmpty ? "None" : conditions.joined(separator: ", ")
    }
    
    private func formatDate(_ date: Date) -> String {
        let formatter = DateFormatter()
        formatter.dateStyle = .medium
        formatter.timeStyle = .short
        return formatter.string(from: date)
    }
}
